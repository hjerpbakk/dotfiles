
#!/bin/bash
set -e

# Raspberry Pi dnsmasq script
# Runar Ovesen Hjerpbakk
# https://hjerpbakk.com
# Inspired by http://www.heystephenwood.com/2013/06/use-your-raspberry-pi-as-dns-cache-to.html
# 
# Usage: 
# $ sudo ./dnsmasq-server
#
# Net install:
# $ curl -s https://raw.githubusercontent.com/Sankra/dotfiles/master/roles/dnsmasq_server | sudo sh

# Must be run as root or sudo
if [ $(id -u) != 0 ]
then
  echo "This script must be run as root or with sudo."
  exit
fi

apt-get install -y dnsmasq
cat - > /etc/dnsmasq.conf <<DNSMASQCONF
# Dnsmasq.conf for raspberry pi    
# By Runar Ovesen Hjerpbakk https://hjerpbakk.com  
# Full examples found here:  
# http://www.thekelleys.org.uk/dnsmasq/docs/dnsmasq.conf.example  
 
# Set up your local domain here    
domain=raspberry.local    
resolv-file=/etc/resolv.dnsmasq  
min-port=4096   
server=1.1.1.1
server=1.0.0.1
      
# Max cache size dnsmasq can give us, and we want all of it!    
cache-size=10000    
      
# Below are settings for dhcp. Comment them out if you dont want    
# dnsmasq to serve up dhcpd requests.    
# dhcp-range=192.168.0.100,192.168.0.149,255.255.255.0,1440m    
# dhcp-option=3,192.168.0.1    
# dhcp-authoritative

DNSMASQCONF

service dnsmasq restart

echo "Testing dns performance with random urls"

# We'll generate a list of urls that we're moderately certain doesn't exist in our cache to get a good base line for speed increases.
URLS=`for i in {1..50}; do echo www.$RANDOM.com;done`

# Make the requests in parallel
echo $URLS | xargs -I^ -P50 dig @127.0.0.1 grep time | awk /time/'{sum+=$4} END { print "average response = ", sum/NR,"ms"}'
echo $URLS | xargs -I^ -P50 dig @127.0.0.1 grep time | awk /time/'{sum+=$4} END { print "average response = ", sum/NR,"ms"}'
echo $URLS | xargs -I^ -P50 dig @127.0.0.1 grep time | awk /time/'{sum+=$4} END { print "average response = ", sum/NR,"ms"}'
echo $URLS | xargs -I^ -P50 dig @127.0.0.1 grep time | awk /time/'{sum+=$4} END { print "average response = ", sum/NR,"ms"}'

echo 'Installation complete. Enjoy!'
